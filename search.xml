<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[Vue.js高仿饿了么实战总结（二）]]></title>
    <url>%2F2017%2F12%2F21%2FVue.js%E9%AB%98%E4%BB%BF%E9%A5%BF%E4%BA%86%E4%B9%88%E5%AE%9E%E6%88%98%E6%80%BB%E7%BB%93%EF%BC%88%E4%BA%8C%EF%BC%89%2F</url>
    <content type="text"><![CDATA[Vue.js高仿饿了么实战总结（二） 一、项目实战-header组件开发 安装ajax异步请求插件vue-resource：cnpm install vue-resource –save-dev post-css根据can i use自动添加浏览器兼容 配置项目整体路由 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081 //文件位置：src/APP.vue&lt;template&gt; &lt;div id="app"&gt; &lt;v-header :seller="seller"&gt;&lt;/v-header&gt; &lt;div class="tab border-1px"&gt; &lt;div class="tab-item"&gt; &lt;!-- 使用 router-link 组件来导航. --&gt; &lt;!-- 通过传入 `to` 属性指定链接. --&gt; &lt;!-- &lt;router-link&gt; 默认会被渲染成一个 `&lt;a&gt;` 标签 --&gt; &lt;router-link to="/goods" &gt;商品&lt;/router-link&gt; &lt;/div&gt; &lt;div class="tab-item"&gt; &lt;router-link to="/ratings"&gt;评论&lt;/router-link&gt; &lt;/div&gt; &lt;div class="tab-item"&gt; &lt;router-link to="/seller"&gt;商家&lt;/router-link&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class="content"&gt; &lt;!--keep-alive会使得之前的操作默认会被记住--&gt; &lt;keep-alive&gt; &lt;router-view :seller="seller"&gt;&lt;/router-view&gt; &lt;/keep-alive&gt; &lt;/div&gt; &lt;/div&gt;&lt;/template&gt;&lt;script type="text/ecmascript-6"&gt; import header from './components/header/header.vue' import &#123;urlParse&#125; from './common/js/util' const ERR_OK = 0 //OK状态码 export default&#123; data() &#123; return &#123; seller: &#123; id: (() =&gt; &#123; let queryParam = urlParse() console.log(queryParam) return queryParam.id &#125;)() &#125; &#125; &#125;, created() &#123; this.$http.get('/api/seller?id=' + this.seller.id).then((response) =&gt; &#123; response = response.body //返回json对象 // console.log(response) if (response.errno === ERR_OK) &#123; this.seller = response.data //es6语法赋值 (最终返回的数组，source 以extend方法扩展对象属性） this.seller = Object.assign(&#123;&#125;, this.seller, response.data) console.log(this.seller) &#125; &#125;) &#125;, components: &#123; 'v-header': header &#125; &#125;&lt;/script&gt;&lt;style lang="stylus" rel="stylesheet/stylus"&gt; @import './common/stylus/mixin.styl'; #app .tab display: flex width: 100% height: 40px line-height: 40px border-1px(rgba(7,17,27,0.1)) .tab-item flex: 1 text-align: center &amp; &gt; a display: block font-size: 14px color: rgb(77,85,93) &amp;.active color: rgb(240,20,20) &lt;/style&gt; 12345678910111213141516171819202122232425262728// 文件位置：src/router/index.jsimport Vue from 'vue';import Router from 'vue-router';/* import Hello from '@/components/Hello'; */import goods from '@/components/goods/goods.vue';import ratings from '@/components/ratings/ratings.vue';import seller from '@/components/seller/seller.vue';Vue.use(Router);const routes = [&#123; path: '/', component: goods&#125;, &#123; path: '/goods', component: goods&#125;, &#123; path: '/ratings', component: ratings&#125;, &#123; path: '/seller', component: seller&#125;];export default new Router(&#123; linkActiveClass: 'active', // 自定义路由激活class名 routes: routes&#125;); 配置项目整体依赖 12345678910111213141516171819202122232425262728293031323334353637383940//文件位置： src/main.js import Vue from 'vue'import App from './App'import VueRouter from 'vue-router'import VueResource from 'vue-resource'import VueBus from 'vue-bus'import goods from './components/goods/goods.vue'import ratings from './components/ratings/ratings.vue'import seller from './components/seller/seller.vue'import './common/stylus/index.styl'Vue.config.productionTip = falseVue.use(VueRouter)// 使用Vue-resource必须放在前面，放在后面报错Vue.use(VueResource)//vue-bus事件处理中心Vue.use(VueBus)const routes = [ &#123;path: '/goods', component: goods&#125;, &#123; path: '/ratings', component: ratings &#125;, &#123; path: '/seller', component: seller &#125;]const router = new VueRouter(&#123; routes, // （缩写）相当于 routes: routes linkActiveClass: 'active'&#125;)// 页面加载自动导航到goods页面router.push('/goods')/* eslint-disable no-new */new Vue(&#123; el: '#app', router, template: '&lt;App/&gt;', components: &#123; App &#125;&#125;) 通用样式 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148// 文件位置：static/css/reset.css/** * Eric Meyer&apos;s Reset CSS v2.0 (http://meyerweb.com/eric/tools/css/reset/) * http://cssreset.com */html, body, div, span, applet, object, iframe,h1, h2, h3, h4, h5, h6, p, blockquote, pre,a, abbr, acronym, address, big, cite, code,del, dfn, em, img, ins, kbd, q, s, samp,small, strike, strong, sub, sup, tt, var,b, u, i, center,dl, dt, dd, ol, ul, li,fieldset, form, label, legend,table, caption, tbody, tfoot, thead, tr, th, td,article, aside, canvas, details, embed,figure, figcaption, footer, header,menu, nav, output, ruby, section, summary,time, mark, audio, video, input &#123; margin: 0; padding: 0; border: 0; font-size: 100%; font-weight: normal; vertical-align: baseline;&#125;/* HTML5 display-role reset for older browsers */article, aside, details, figcaption, figure,footer, header, menu, nav, section &#123; display: block;&#125;body &#123; line-height: 1;&#125;blockquote, q &#123; quotes: none;&#125;blockquote:before, blockquote:after,q:before, q:after &#123; content: none;&#125;table &#123; border-collapse: collapse; border-spacing: 0;&#125;/* custom */a &#123; color: #7e8c8d; text-decoration: none; text-decoration: none; -webkit-backface-visibility: hidden;&#125;li &#123; list-style: none;&#125;::-webkit-scrollbar &#123; width: 5px; height: 5px;&#125;::-webkit-scrollbar-track-piece &#123; background-color: rgba(0, 0, 0, 0.2); -webkit-border-radius: 6px;&#125;::-webkit-scrollbar-thumb:vertical &#123; height: 5px; background-color: rgba(125, 125, 125, 0.7); -webkit-border-radius: 6px;&#125;::-webkit-scrollbar-thumb:horizontal &#123; width: 5px; background-color: rgba(125, 125, 125, 0.7); -webkit-border-radius: 6px;&#125;html, body &#123; width: 100%;&#125;body &#123; -webkit-text-size-adjust: none; -webkit-tap-highlight-color: rgba(0, 0, 0, 0);&#125;// 文件位置：src/common/stylus/base.stylbody, html line-height: 1 font-weight: 200 font-family: &apos;PingFang SC&apos;, &apos;STHeitiSC-Light&apos;, &apos;Helvetica-Light&apos;, arial, sans-serif.clearfix display: inline-block &amp;:after display: block content: &quot;.&quot; height: 0 line-height: 0 clear: both visibility: hidden@media (-webkit-min-device-pixel-ratio: 1.5),(min-device-pixel-ratio: 1.5) .border-1px &amp;::after -webkit-transform: scaleY(0.7) transform: scaleY(0.7)@media (-webkit-min-device-pixel-ratio: 2),(min-device-pixel-ratio: 2) .border-1px &amp;::after -webkit-transform: scaleY(0.5) transform: scaleY(0.5)// 文件位置：src/common/stylus/mixin.stylborder-1px($color) position: relative; //清除浮动 &amp;:after display: block position absolute left: 0 bottom: 0 border-top 1px solid $color width: 100% content: &apos;&apos;bg-image($url) background-image url($url + &quot;@2x.png&quot;) @media (-webkit-min-device-pixel-ratio: 3),(min-device-pixel-ratio) background-image url($url + &quot;@3x.png&quot;)border-none() &amp;:after display: none// 引用mixin@import &quot;common/stylus/mixin.styl&quot; 二、项目实战-goods 商品列表页开发 安装better-scroll：cnpm install better-scroll –save-dev123456789101112// ref属性一定是驼峰式命名的，不能用连字符的；// ref可以用来获取HTML元素，同时也能获取子组件/*&lt;ul ref='food'&gt; &lt;li&gt;&lt;/li&gt; &lt;/ul&gt;&lt;shopcart ref="shopcart" :select-foods="selectFoods" :delivery-price="seller.deliveryPrice" :min-price="seller.minPrice"&gt;&lt;/shopcart&gt;*/this.$refs.foodthis.$refs.food.getElementByTagName('li')this.$refs.shopcart.drop(target); 在created钩子的ajax异步请求成功后执行better-scroll初始化 123456789101112131415161718192021222324export default &#123; created() &#123; this.classMap = ['decrease', 'discount', 'special', 'invoice', 'guarantee']; this.$http.get('/api/goods').then(response =&gt; &#123; // get body data response = response.body; // 返回json对象 if (response.error === ERR_OK) &#123; this.goods = response.data; //this.$nextTick() =&gt; 在下次 DOM 更新循环结束之后执行延迟回调。在修改数据之后立即使用这个方法，获取更新后的 DOM。 //数据发生变化后，不能直接更新在dom上，需要在回调函数中刷新DOM,即异步加载DOM console.log(this.goods); // DOM异步加载完成后 // 调用better-scroll封装的方法 // 动态计算每个区块的高度 this.$nextTick(() =&gt; &#123; this._initScroll(); this._calculateHeight(); &#125;) &#125; &#125;, response =&gt; &#123; // error callback &#125;); &#125;&#125; better-scroll 会禁止移动端的点击事件，需要重新派发，同时在PC端会点击两次，此处需要做判断 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113export default&#123; props: &#123; seller: &#123; type: Object &#125; &#125;, data() &#123; return &#123; goods: [], listHeight: [], scrollY: 0, selectedFood: &#123;&#125; &#125; &#125;, computed: &#123; currentIndex() &#123; for (let i = 0; i &lt; this.listHeight.length; i++) &#123; let height1 = this.listHeight[i] let height2 = this.listHeight[i + 1] //listHeight[length]返回undefined,所以可以用!height2做判断不是最后一个 if (!height2 || this.scrollY &gt;= height1 &amp;&amp; this.scrollY &lt; height2) &#123; return i &#125; &#125; return 0 &#125;, selectFoods() &#123; let foods = [] this.goods.forEach((good) =&gt; &#123; good.foods.forEach((food) =&gt; &#123; if (food.count) &#123; foods.push(food) &#125; &#125;) &#125;) return foods &#125; &#125;, created() &#123; this.classMap = ['decrease', 'discount', 'special', 'invoice', 'guarantee'] this.$http.get('/api/goods').then((response) =&gt; &#123; response = response.body if (response.errno === ERR_OK) &#123; this.goods = response.data //this.$nextTick() =&gt; 在下次 DOM 更新循环结束之后执行延迟回调。在修改数据之后立即使用这个方法，获取更新后的 DOM。 //数据发生变化后，不能直接更新在dom上，需要在回调函数中刷新DOM,即异步加载DOM this.$nextTick(() =&gt; &#123; this._initScroll() this._calculateHeight() &#125;) &#125; &#125;) &#125;, methods: &#123; // this.$refs：取得DOM对象 getFood(el) &#123; this.$nextTick(() =&gt; &#123; this.$refs.shopcart.drop(el) &#125;) &#125;, //左右连动 selectMenu(index, event) &#123; //event._constructed是为true,pc浏览器没有此事件 if (!event._constructed) &#123; return &#125; let foodList = this.$refs.foodsWrapper.getElementsByClassName('food-list-hook') let el = foodList[index] this.foodsScroll.scrollToElement(el, 300) &#125;, _initScroll() &#123; // this.$refs：取得DOM对象 this.menuScroll = new BScroll(this.$refs.menuWrapper, &#123; click: true //取消默认阻止事件 &#125;) this.foodsScroll = new BScroll(this.$refs.foodsWrapper, &#123; click: true, probeType: 3 //监听事件的触发时间，1为即时触发，3为延迟到事件完毕后触发 &#125;) this.foodsScroll.on('scroll', (pos) =&gt; &#123; this.scrollY = Math.abs(Math.round(pos.y)) &#125;) &#125;, _calculateHeight() &#123; let foodList = this.$refs.foodsWrapper.getElementsByClassName('food-list-hook') let height = 0 this.listHeight.push(height) for (let i = 0; i &lt; foodList.length; i++) &#123; let item = foodList[i] height += item.clientHeight this.listHeight.push(height) &#125; &#125;, getEvent(el) &#123; // 体验优化,异步执行下落动画 this.$nextTick(() =&gt; &#123; this.$refs.shopcart.drop(el) &#125;) &#125;, selectFood(food, event) &#123; if (!event._constructed) &#123; return &#125; this.selectedFood = food this.$refs.food.show() //拿到food组件 调用show方法 &#125; &#125;, components: &#123; shopcart, cartcontrol, food &#125;&#125; 参数添加属性，并使其能被观测到 12// 给food添加count属性，并设置它的值为1，这样VUE就可以观测到Vue.set(this.food, 'count', 1); 小球动画函数监听 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859export default &#123; methods: &#123; drop(el) &#123; // console.log(el); for (let i = 0; i &lt; this.balls.length; i++) &#123; let ball = this.balls[i]; if (!ball.show) &#123; ball.show = true; ball.el = el; this.dropBalls.push(ball); return; &#125; &#125; &#125;, // 小球动画钩子 beforeDrop: function (el) &#123; let count = this.balls.length; while (count--) &#123; let ball = this.balls[count]; if (ball.show) &#123; let rect = ball.el.getBoundingClientRect(); let x = rect.left - 32; let y = -(window.innerHeight - rect.top - 22); el.style.display = ''; el.style.webkitTransform = `translate3d(0,$&#123;y&#125;px,0)`; el.style.transform = `translate3d(0,$&#123;y&#125;px,0)`; let inner = el.getElementsByClassName('inner-hook')[0]; inner.style.webkitTransform = `translate3d($&#123;x&#125;px,0,0)`; inner.style.transform = `translate3d($&#123;x&#125;px,0,0)`; console.log(el, x, y); &#125; &#125; &#125;, // 此回调函数是可选项的设置 // 与 CSS 结合时使用 dropping: function (el, done) &#123; /* eslint-disable no-unused-vars */ let rf = el.offsetHeight; // 触发一下浏览器重绘 this.$nextTick(() =&gt; &#123; el.style.display = ''; el.style.webkitTransform = 'translate3d(0,0,0)'; el.style.transform = 'translate3d(0,0,0)'; let inner = el.getElementsByClassName('inner-hook')[0]; inner.style.webkitTransform = 'translate3d(0,0,0)'; inner.style.transform = 'translate3d(0,0,0)'; // 监听动画结束事件，之后执行done函数 el.addEventListener('transitionend', done); &#125;); // done(); &#125;, afterDrop: function (el) &#123; let ball = this.dropBalls.shift(); if (ball) &#123; ball.show = false; el.style.display = 'none'; &#125; &#125; &#125;&#125; 阻止冒泡/默认事件 123&lt;div class=&quot;content-right&quot; @click.stop.prevent=&quot;pay&quot;&gt; &lt;div class=&quot;pay&quot; :class=&quot;payClass&quot;&gt;&#123;&#123;payDesc&#125;&#125;&lt;/div&gt;&lt;/div&gt; 至此header和goods组件的关键点总结完毕，下章是food和star组件的总结。]]></content>
      <categories>
        <category>vue</category>
      </categories>
      <tags>
        <tag>study</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Vue.js高仿饿了么实战总结（一）]]></title>
    <url>%2F2017%2F12%2F20%2FVue.js%E9%AB%98%E4%BB%BF%E9%A5%BF%E4%BA%86%E4%B9%88%E5%AE%9E%E6%88%98%E6%80%BB%E7%BB%93%EF%BC%88%E4%B8%80%EF%BC%89%2F</url>
    <content type="text"><![CDATA[Vue.js高仿饿了么实战总结（一） 一、近期状况： 距离上一篇发布也有快一个月了。这一个月期间，我在每天实习的最后两个时和回去后挤出来的一两小时跟着慕课网的饿了么网实战视频做项目，收获其实还是很多的，也让我获得了第一个感觉还满意的实习单位，感谢这一个月的自己！其中接触了很多新的技术，但是还是有很多地方不是很理解，还是慢慢来吧。下面开始写项目的总结，因为内容比较多，所以应该会分为几篇文章。 二、项目总结 1 .Vue-cli开启Vuejs项目 全局安装vue-cli脚手架工具：cnpm install -g vue-cli 初始化sell项目：vue init webpack sell 进入sell目录：cd sell 或者在项目文件夹下git bash here 安装依赖（依据package.json文件，时间稍长）：cnpm install 运行项目（package.json中配置）：cnpm run dev 或者 node build/dev-server.js 2 . 项目实战-准备工作 IconMoon（一个优秀的在线的图标转换网站）把SVG文件生成字体文件。生成的字体文件放在新建的common/fonts目录下。 写mock数据接口。因为这个项目并不是真正投入使用的，所以需要mock相关的数据以供使用。12345678910111213141516171819202122232425262728293031323334// 文件位置：build/webpack.dev-conf.js// 注：此处是关键代码，并非全部//这里使用express框架的router编写接口请求。var app = express()/* 自定义接口数据 开始 */var appData = require('../data.json')var seller = appData.sellervar goods = appData.goodsvar ratings = appData.ratingsvar apiRoutes = express.Router()apiRoutes.get('/seller', function (req, res) &#123; res.json(&#123; //这里是你的json内容 error: 0, data: seller &#125;)&#125;)apiRoutes.get('/goods', function (req, res) &#123; res.json(&#123; error: 0, data: goods &#125;)&#125;)apiRoutes.get('/ratings', function (req, res) &#123; res.json(&#123; error: 0, data: ratings &#125;)&#125;)app.use('/api', apiRoutes)/* 自定义接口数据 结束 */ 3 . 项目实战-页面骨架开发 webstorm 设置Vue类型文件的默认结构：New -&gt; Edit File Templates… -&gt; + 123456789101112&lt;template&gt;&lt;/template&gt;&lt;script type="text/ecmascript-6"&gt; /* eslint-disable semi */ export default &#123;&#125;&lt;/script&gt;&lt;style lang="stylus" rel="stylesheet/stylus"&gt;&lt;/style&gt; 安装CSS预处理器（选择老师使用的stylus） cnpm install stylus stylus-loader less less-loader sass sass-loader –save-dev webpack.base.conf.js 配置路径别名 123456789101112module.exports = &#123; resolve: &#123; extensions: ['.js', '.vue', '.json'], alias: &#123; 'vue$': 'vue/dist/vue.esm.js', '@': resolve('src'), // 路径别名配置（自定义） 'assets': resolve('src/assets'), 'components': resolve('src/components') &#125; &#125;&#125; 修改配置文件不能触发hotreload 至此项目编写的环境差不多搭建好了，下一章开始是各个组件的总结。]]></content>
      <categories>
        <category>vue</category>
      </categories>
      <tags>
        <tag>study</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[安装vue-cli]]></title>
    <url>%2F2017%2F11%2F24%2F%E5%AE%89%E8%A3%85vue-cli%2F</url>
    <content type="text"><![CDATA[安装vue-cli 一、那么我们就从最简单的环境搭建开始： 1 . 安装node.js，从node.js官网下载并安装node，安装过程很简单，一路“下一步”就可以了（傻瓜式安装）。安装完成之后，打开命令行工具(win+r，然后输入cmd)，输入 node -v，如下图，如果出现相应的版本号，则说明安装成功。 这里需要说明下，因为在官网下载安装node.js后，就已经自带npm（包管理工具）了，另需要注意的是npm的版本最好是3.x.x以上，以免对后续产生影响。 2 .安装淘宝镜像，打开命令行工具，把这个（npm install -g cnpm –registry = https://registry.npm.taobao.org）复制（这里要手动复制就是用鼠标右键那个，具体为啥不多解释），安装这里是因为我们用的npm的服务器是外国，有的时候我们安装“依赖”的时候很很慢很慢超级慢，所以就用这个cnpm来安装我们说需要的“依赖”。安装完成之后输入 cnpm -v，如下图，如果出现相应的版本号，则说明安装成功。 3 .安装webpack，打开命令行工具输入：npm install webpack -g，安装完成之后输入 webpack -v，如下图，如果出现相应的版本号，则说明安装成功。 4 .安装vue-cli脚手架构建工具，打开命令行工具输入：npm install vue-cli -g，安装完成之后输入 vue -V（注意这里是大写的“V”），如下图，如果出现相应的版本号，则说明安装成功。二、通过以上四步，我们需要准备的环境和工具都准备好了，接下来就开始使用vue-cli来构建项目 1 .在硬盘上找一个文件夹放工程用的。这里有两种方式指定到相关目录：①cd 目录路径 ②如果以安装git的，在相关目录右键选择Git Bash Here 2 .安装vue脚手架输入：vue init webpack exprice ，注意这里的“exprice” 是项目的名称可以说是随便的起名，但是需要主要的是“不能用中文”。123456789101112131415161718192021222324$ vue init webpack exprice --------------------- 这个是那个安装vue脚手架的命令This will install Vue 2.x version of the template. ---------------------这里说明将要创建一个vue 2.x版本的项目For Vue 1.x use: vue init webpack#1.0 exprice? Project name (exprice) ---------------------项目名称? Project name exprice? Project description (A Vue.js project) ---------------------项目描述? Project description A Vue.js project? Author Datura --------------------- 项目创建者? Author Datura? Vue build (Use arrow keys)? Vue build standalone? Install vue-router? (Y/n) --------------------- 是否安装Vue路由，也就是以后是spa（但页面应用需要的模块）? Install vue-router? Yes? Use ESLint to lint your code? (Y/n) n ---------------------是否启用eslint检测规则，这里个人建议选no? Use ESLint to lint your code? No? Setup unit tests with Karma + Mocha? (Y/n)? Setup unit tests with Karma + Mocha? Yes? Setup e2e tests with Nightwatch? (Y/n)? Setup e2e tests with Nightwatch? Yesvue-cli · Generated &quot;exprice&quot;.To get started: --------------------- 这里说明如何启动这个服务cd expricenpm installnpm run dev 如下图： 3 . cd 命令进入创建的工程目录，首先cd exprice（这里是自己建工程的名字）； 4 . 安装项目依赖：npm install，因为自动构建过程中已存在package.json文件，所以这里直接安装依赖就行。不要从国内镜像cnpm安装(会导致后面缺了很多依赖库)，但是但是如果真的安装“个把”小时也没成功那就用：cnpm install 吧 5 .安装 vue 路由模块 vue-router 和网络请求模块 vue-resource，输入：cnpm install vue-router vue-resource –save。 下面我简单的说明下各个目录都是干嘛的： 6 .启动项目，输入：npm run dev。服务启动成功后浏览器会默认打开一个“欢迎页面”，如下图：注意：这里是默认服务启动的是本地的8080端口，所以请确保你的8080端口不被别的程序所占用。至此项目构建目录差不多完成了，后面我会继续发布vue的其他知识点。]]></content>
      <categories>
        <category>vue</category>
      </categories>
      <tags>
        <tag>study</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[关于博客]]></title>
    <url>%2F2017%2F09%2F18%2F%E5%85%B3%E4%BA%8E%E5%8D%9A%E5%AE%A2%2F</url>
    <content type="text"><![CDATA[一些自己的想法 这个博客呢我花了很长时间去想要不要去写（其实就是懒QAQ）， 总共花了差不多3天左右时间吧。写的过程中还是遇到不少问题的，好在都解决了。这是布局基本搞好我才开始写的第一篇文章。 整理学习笔记 ：以后有些学习笔记呀什么的我都会发这上面的 偶尔发些生活动态 ：那些很值得纪念的something 记录我的学习路线 ：一步一步慢慢来，现在争取能找个好点的实习单位！ Wish good luck!]]></content>
      <categories>
        <category>about life</category>
      </categories>
      <tags>
        <tag>sth.</tag>
      </tags>
  </entry>
</search>
